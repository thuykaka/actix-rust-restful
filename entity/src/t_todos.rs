//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use chrono::serde::ts_milliseconds;
use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

fn get_current_time() -> DateTime<Utc> {
    chrono::Utc::now()
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "t_todos")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub description: String,
    pub completed: bool,

    #[serde(
        rename = "createdAt",
        default = "get_current_time",
        with = "ts_milliseconds"
    )]
    pub created_at: DateTime<Utc>,
    #[serde(
        rename = "updatedAt",
        default = "get_current_time",
        with = "ts_milliseconds"
    )]
    pub updated_at: DateTime<Utc>,

    #[serde(rename = "userId")]
    pub user_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::t_users::Entity",
        from = "Column::UserId",
        to = "super::t_users::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TUsers,
}

impl Related<super::t_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TUsers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
